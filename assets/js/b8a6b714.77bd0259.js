"use strict";(self.webpackChunkosff_doc=self.webpackChunkosff_doc||[]).push([[630],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},9861:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"authorizer","title":"Authorizer","description":"This guide will walk you through the process of integrating a custom authorizer into your serverless function. For demonstration purposes, we\u2019ll create a simple custom-auth authorizer and attach it to the getUser API endpoint.","source":"@site/docs/authorizer.md","sourceDirName":".","slug":"/authorizer","permalink":"/osff-documentation/docs/authorizer","draft":false,"unlisted":false,"editUrl":"https://github.com/Grids-and-Guides/osff-documentation/docs/authorizer.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Deployment","permalink":"/osff-documentation/docs/deployment"},"next":{"title":"cors","permalink":"/osff-documentation/docs/cors"}}');var o=t(4848),i=t(8453);const s={sidebar_position:6},a="Authorizer",c={},u=[{value:"step 1",id:"step-1",level:4},{value:"step 2",id:"step-2",level:4},{value:"step 3",id:"step-3",level:4},{value:"step 4",id:"step-4",level:4},{value:"step 5",id:"step-5",level:4}];function l(e){const n={code:"code",h1:"h1",h4:"h4",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"authorizer",children:"Authorizer"})}),"\n",(0,o.jsx)(n.p,{children:"This guide will walk you through the process of integrating a custom authorizer into your serverless function. For demonstration purposes, we\u2019ll create a simple custom-auth authorizer and attach it to the getUser API endpoint."}),"\n",(0,o.jsx)(n.h4,{id:"step-1",children:"step 1"}),"\n",(0,o.jsx)(n.p,{children:"Create Required Files and Folders"}),"\n",(0,o.jsx)(n.p,{children:"Begin by setting up the necessary folder structure inside your src directory:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 lambda-handler\n        \u2514\u2500\u2500 http\n            \u2514\u2500\u2500 authorizer.ts\n"})}),"\n",(0,o.jsx)(n.p,{children:"This structure helps organize your authorizer logic and keep your project maintainable."}),"\n",(0,o.jsx)(n.h4,{id:"step-2",children:"step 2"}),"\n",(0,o.jsx)(n.p,{children:"Implement the Authorizer Logic in authorizer.ts"}),"\n",(0,o.jsx)(n.p,{children:"Next, implement the logic for your custom authorizer. In this example, the authorizer performs a basic API key validation. However, you can modify this logic to fit your specific authentication requirements."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// src/lambda-handler/http/authorizer.ts\n\nimport { APIGatewayAuthorizerResult, APIGatewayTokenAuthorizerEvent, AuthResponse, PolicyDocument } from 'aws-lambda';\n\n// generatePolicy creates a policy document to allow this user on this API:\nfunction generatePolicy (effect: string, resource: string): PolicyDocument {\n  const policyDocument = {} as PolicyDocument\n  if (effect && resource) {\n    policyDocument.Version = '2012-10-17'\n    policyDocument.Statement = []\n    const statementOne: any = {}\n    statementOne.Action = 'execute-api:Invoke'\n    statementOne.Effect = effect\n    statementOne.Resource = resource\n    policyDocument.Statement[0] = statementOne\n  }\n  return policyDocument\n}\n\nexport const handler = async (event: APIGatewayTokenAuthorizerEvent): Promise<APIGatewayAuthorizerResult> => {\n    // Extract the bearer authorization token from the event\n    const authHeader = event.authorizationToken;\n    if(!authHeader){\n        throw new Error('authorization token not found');\n    }\n    const token = authHeader.split(' ')[1]!;\n\n    try {\n        if(token !== '1234'){\n            throw new Error(\"Invaild Token\")\n        }\n    } catch (err) {\n        console.error('Error verifying token', err);\n        // Return an authorization response indicating the request is not authorized\n        const policyDoc = generatePolicy('Deny', '*')\n        return {\n            principalId: 'user',   // decoded.sub\n            policyDocument: policyDoc\n        } as AuthResponse;\n    }\n\n    // return an authorization response indicating the request is authorized\n    const policyDoc = generatePolicy('Allow', '*')\n        return {\n            principalId: 'user',   // decoded.sub\n            policyDocument: policyDoc\n        } as AuthResponse;\n};\n"})}),"\n",(0,o.jsx)(n.h4,{id:"step-3",children:"step 3"}),"\n",(0,o.jsxs)(n.p,{children:["Register the Authorizer in ",(0,o.jsx)(n.code,{children:"app-config.ts"})]}),"\n",(0,o.jsx)(n.p,{children:"Finally, register the custom authorizer function within your app-config.ts file. This step makes the authorizer available for use in your API routes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'// bin/app-config.ts\n\nconst authFunction = new FunctionConfig(\n    "auth-${self.stage}",\n    "lambda.Runtime.NODEJS_22_X",\n    "index.handler",\n    path.resolve(process.cwd(),"src/lambda-handler/http/authorizer.ts"),\n    path.resolve(process.cwd(), "dist/lambda-handler/http/authorizer/index.js"),\n    256,\n    10,\n    30,\n    {\n      "MONGODB_URI": "localhost:db",\n      "frontendUrl": "${env.frontendUrl}",\n      "functionName": "${currentFunction.name}",\n      "cors": "${env.cors}"\n    }\n  );\n\nexport const appStack = new AppStack(\n    ...\n    [new Authorizer("my-auth-func", "restApi", authFunction)], // here you can register the auth function with any name.\n    ...\n}\n\n'})}),"\n",(0,o.jsx)(n.h4,{id:"step-4",children:"step 4"}),"\n",(0,o.jsx)(n.p,{children:"Attach the Authorizer to Your API Route"}),"\n",(0,o.jsx)(n.p,{children:"With the custom authorizer in place, you can now attach it to any API route where authentication is required."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'// src/lambda-handler/http/user.config.ts\n\nimport { FunctionConfig, Trigger } from \'osff-dsl\';\nimport path from \'path\';\n\nconst getUserTrigger = new Trigger(\n    "http",             \n    "getUser",          \n    "GET",              \n    "application/json", \n    "my-serverless-app-${self.stage}",  \n    "my-auth-func"  // here you can pass your auth function name\n  );\n  \nexport const getUserFunction = new FunctionConfig(\n    "getUser-${self.stage}",    // function name\n    "lambda.Runtime.NODEJS_22_X",   // runtime\n    "index.handler",    // lambda handler\n   ...\n    [getUserTrigger]    \n  );\n'})}),"\n",(0,o.jsx)(n.h4,{id:"step-5",children:"step 5"}),"\n",(0,o.jsx)(n.p,{children:"You can now start the application locally:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm run start --stage local --port 3000\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);